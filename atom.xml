<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[voidxin'blog]]></title>
  <link href="http://voidxin.github.io/atom.xml" rel="self"/>
  <link href="http://voidxin.github.io/"/>
  <updated>2016-07-24T17:38:24+08:00</updated>
  <id>http://voidxin.github.io/</id>
  <author>
    <name><![CDATA[voidxin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[越分享越牛逼]]></title>
    <link href="http://voidxin.github.io/blog/2016/07/23/yue-fen-xiang-yue-niu-bi/"/>
    <updated>2016-07-23T14:39:43+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/07/23/yue-fen-xiang-yue-niu-bi</id>
    <content type="html"><![CDATA[<p>  我是voidxin，一名正在探索的iOS程序员，从此我就入住Octopress啦，在以后的日子里，我将在这里分享我的工作、生活以及技术。</p>

<!--more-->


<p>  之前一直是在简书上发表一些东西，然后最近一段时间觉得是时候自己开个博客了，于是就有了这个博客。我会把之前在简书上的文章都搬家过来，毕竟那些都是我这么久以来的心血。
  一路走一路感悟，感悟生活感悟工作，毕业整整一年，工作整整两年。没有成长为大牛，也没进入世界五百强，coding的路上，有彷徨也有希望，我坚持我所坚持的，相信我所相信的，不断学习，不断进步，相信明天会更好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[七牛云储存实现iOS企业版分发]]></title>
    <link href="http://voidxin.github.io/blog/2016/07/22/qi-niu-yun-chu-cun-shi-xian-iosqi-ye-ban-fen-fa/"/>
    <updated>2016-07-22T11:39:18+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/07/22/qi-niu-yun-chu-cun-shi-xian-iosqi-ye-ban-fen-fa</id>
    <content type="html"><![CDATA[<p>iOS企业证书的发版这里就不多说了。
由于app现在放在公司自己的服务器中，为了实现https的plist下载链接还特意把plist挂在了开源中国上。小公司，带宽小，多用户升级的时候给公司服务器带来不小的压力。所以最近工头有把ipa挂在七牛上去的想法，这样就可以有效的缓解服务器的压力。</p>

<!--more-->


<p>企业版分发的plist下载链接必须是https协议的，所以需要SSL证书。如果你公司没有证书，那么可以使用七牛。
接下来开始步骤：</p>

<p>1：使用xcode打包生成ipa文件（过程不多说）</p>

<p>2：登陆七牛（默认你已有账号，没账号请注册）</p>

<p>3：登陆之后添加资源：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-5594fd1b12180d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加资源.png" /></p>

<p>4：创建空间：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-8010026c145506ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建空间.png" /></p>

<p>5：创建成功之后在资源列表中你可以看到你新创建的资源:</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-9ca45a61ed93db17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="资源列表.png" /></p>

<p>6：选中你新创建的资源名称，然后选中内容管理&ndash;>上传文件（这里先上传ipa文件）：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-97f55b29c96e1248.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上传文件.png" /></p>

<p>7：上传ipa文件成功之后查看文件的外链接，如图：（你看到的链接可能并不是https的而是http的，这里后面再说明)</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-3c5f566747757dc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="外链接.png" /></p>

<p>8:复制ipa文件的外链，接下来就是要上传plist文件了，首先创建plist文件：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-5bfe42bb1f36c8db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="plist文件内容.png" /></p>

<p>在plist文件的url中填写你复制的ipa的外链。其他的只需填写bundle-identifier为你的项目的id即可，title中填写你app的名称，其他的可不变。然后保存plist文件。</p>

<p>9：接下来就是上传plist文件到七牛了，同ipa文件的上传一样，上传成功后点击外链接即可查看外链：
<img src="http://upload-images.jianshu.io/upload_images/1376067-688cc663867c7d9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="plist.png" /></p>

<p>10：接下来是最重要的一步，因为你会发现你上传的plist文件的外链接并不是https的，而企业版分发的plist下载链接必须是https。所以别急.先在查看内容中保存默认域名，然后选中你创建的空间名称，你会看到页面上有个“融合CDN加速域名”的title，点击添加HTTPS域名：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-19716f4069399085.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击保存域名.png" /></p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-2b5be6d164e1219c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="https域名.png" /></p>

<p>好了，此时你再去内容管理中，点击你之前上传的plist文件查看它的外链接，你会发现它已经是https的了。
ok，https链接的plist文件已生成，复制链接，在代码中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#warning 测试代码
</span><span class='line'>    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
</span><span class='line'>        UIApplication *application = [UIApplication sharedApplication];
</span><span class='line'>        [application openURL:[NSURL URLWithString:[NSString stringWithFormat:@"itms-services://?action=download-manifest&url=https://你的plist外链接地址.plist"]]];
</span><span class='line'>        exit(0);
</span><span class='line'>    });</span></code></pre></td></tr></table></div></figure>


<p>就可以升级了。</p>

<p>有时你会发现，在你要升级版本的时候，你虽然更换了ipa文件，但是plist文件地址所对应的url的升级包并没有变，或者你连plist文件中的url也更新重新上传，但是你再次打开plist的外链你会发现plist的内容并没有修改。为此我忙活了半天不知道为什么。后来才知道这是由于七牛缓存的原因，所以你每次要发版的时候，在你上传完ipa文件的时候，最后能去刷新一下plist文件和ipa文件，在个人看板中：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-7dcc8f44efc0ed89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个人中心.png" /></p>

<p>有个刷新预取得功能，复制ipa的链接或plist的外链到那里即可刷新（刷新是有次数限制的）：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-8af27c4f8b3a6146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="刷新预取.png" /></p>

<p>恩，刷新完时候你就可以愉快的升级了。（缓存很啃爹，请慢慢摸索）。
最后奉上plist文件的源码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class='line'>&lt;plist version="1.0"&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>  &lt;key&gt;items&lt;/key&gt;
</span><span class='line'>  &lt;array&gt;
</span><span class='line'>      &lt;dict&gt;
</span><span class='line'>          &lt;key&gt;assets&lt;/key&gt;
</span><span class='line'>          &lt;array&gt;
</span><span class='line'>              &lt;dict&gt;
</span><span class='line'>                  &lt;key&gt;kind&lt;/key&gt;
</span><span class='line'>                  &lt;string&gt;software-package&lt;/string&gt;
</span><span class='line'>                  &lt;key&gt;url&lt;/key&gt;
</span><span class='line'>                  &lt;string&gt;ipa文件的外链，这个外链可以不是https的，也就是说http即可&lt;/string&gt;
</span><span class='line'>              &lt;/dict&gt;
</span><span class='line'>              &lt;dict&gt;
</span><span class='line'>                  &lt;key&gt;kind&lt;/key&gt;
</span><span class='line'>                  &lt;string&gt;full-size-image&lt;/string&gt;
</span><span class='line'>                  &lt;key&gt;needs-shine&lt;/key&gt;
</span><span class='line'>                  &lt;true/&gt;
</span><span class='line'>                  &lt;key&gt;url&lt;/key&gt;
</span><span class='line'>                  &lt;string&gt;&lt;/string&gt;
</span><span class='line'>              &lt;/dict&gt;
</span><span class='line'>              &lt;dict&gt;
</span><span class='line'>                  &lt;key&gt;kind&lt;/key&gt;
</span><span class='line'>                  &lt;string&gt;display-image&lt;/string&gt;
</span><span class='line'>                  &lt;key&gt;needs-shine&lt;/key&gt;
</span><span class='line'>                  &lt;true/&gt;
</span><span class='line'>                  &lt;key&gt;url&lt;/key&gt;
</span><span class='line'>                  &lt;string&gt;&lt;/string&gt;
</span><span class='line'>              &lt;/dict&gt;
</span><span class='line'>          &lt;/array&gt;
</span><span class='line'>          &lt;key&gt;metadata&lt;/key&gt;
</span><span class='line'>          &lt;dict&gt;
</span><span class='line'>              &lt;key&gt;bundle-identifier&lt;/key&gt;
</span><span class='line'>              &lt;string&gt;你的bundleID&lt;/string&gt;
</span><span class='line'>              &lt;key&gt;bundle-version&lt;/key&gt;
</span><span class='line'>              &lt;string&gt;1.2.0&lt;/string&gt;
</span><span class='line'>              &lt;key&gt;kind&lt;/key&gt;
</span><span class='line'>              &lt;string&gt;software&lt;/string&gt;
</span><span class='line'>              &lt;key&gt;subtitle&lt;/key&gt;
</span><span class='line'>              &lt;string&gt;App&lt;/string&gt;
</span><span class='line'>              &lt;key&gt;title&lt;/key&gt;
</span><span class='line'>              &lt;string&gt;app名称&lt;/string&gt;
</span><span class='line'>          &lt;/dict&gt;
</span><span class='line'>      &lt;/dict&gt;
</span><span class='line'>  &lt;/array&gt;
</span><span class='line'>&lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure>


<p>ok，以上总结有什么不对或瞎扯的地方欢迎在下方留言中指出。</p>

<p>ps：无demo不文章，抱歉，真没有demo。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode路径改变导致CocoaPods报错的解决办法]]></title>
    <link href="http://voidxin.github.io/blog/2016/07/22/xcodelu-jing-gai-bian-dao-zhi-cocoapodsbao-cuo-de-jie-jue-ban-fa/"/>
    <updated>2016-07-22T11:12:09+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/07/22/xcodelu-jing-gai-bian-dao-zhi-cocoapodsbao-cuo-de-jie-jue-ban-fa</id>
    <content type="html"><![CDATA[<p>这几天心血来潮，更新了下Mac系统，然后装了下Xcode8装逼，接下来就懵逼了。</p>

<!--more-->


<p>由于之前的Xcode是7.1的一直没升级，本想体验体验Xcode8的，所以装完Xcode8之后Xcode7.1也没有删掉，一直两个Xcode一起用着，用了几天之后觉得Xcode8挺稳定的，于是就删了Xcode7，故事由此开始了。</p>

<p>删了Xcode7的几天后，发现Xcode8 bug还是蛮多的，不是很稳定，并且大家都不怎么推荐这么早就使用Xcode8，于是忍痛割爱（要知道这可是我下了好几个小时才下下来的啊）把Xcode8删了准备用回Xcode7.1。于是我就从废纸篓里恢复了几天前删除了的Xcode7.1.庆幸竟然还能用（暗暗窃喜).</p>

<p>今天由于要新增一个第三方，所以我很熟练的vim Podfile
巴拉巴拉巴拉然后再 pod install，接下来就懵逼了。。。。</p>

<p>报如下错误:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Setting up CocoaPods master repo
</span><span class='line'>  $ /usr/bin/git remote set-url origin https://github.com/CocoaPods/Specs.git
</span><span class='line'>  xcrun: error: active developer path ("/Applications/Xcode.app/Contents/Developer") does not exist, use `xcode-select --switch path/to/Xcode.app` to specify the Xcode that you wish to use for command line developer tools (or see `man xcode-select`)
</span><span class='line'>  [!] Failed: /usr/bin/git remote set-url origin https://github.com/CocoaPods/Specs.git
</span><span class='line'>  $ /usr/bin/git checkout master
</span><span class='line'>  xcrun: error: active developer path ("/Applications/Xcode.app/Contents/Developer") does not exist, use `xcode-select --switch path/to/Xcode.app` to specify the Xcode that you wish to use for command line developer tools (or see `man xcode-select`)
</span><span class='line'>  [!] Failed: /usr/bin/git checkout master
</span><span class='line'>[!] Unable to add a source with url `https://github.com/CocoaPods/Specs.git` named `master-1`.
</span><span class='line'>(The `master` repo is not a git repo.)
</span><span class='line'>You can try adding it manually in `~/.cocoapods/repos` or via `pod repo add`.</span></code></pre></td></tr></table></div></figure>


<p>试了几次都不行，又换pod update还是不行，于是我开始怀疑是不是COcoaPods炸了，还是我升级了系统之后炸了。。。。想想不科学，应该是XCode的问题，仔细阅读错误（原谅我英文差），貌似看懂了那么一点，可能是我删了XCode又恢复导致的。就这么一百度果然还真是的。
一句命令搞定：sudo xcode-select &ndash;switch /Applications/Xcode.app（后面的地址直接打开程序把Xcode往这里拖即可)。完事后再pod install。。biubiubiu出现了熟悉的“Analyzing dependencies”字样，最后提示“Pod installation complete! There are 15 dependencies from the Podfile and 16 total pods installed.”。ok成功了。</p>

<p>以上记录我遇到的坑爹错误，给初次遇到这样问题的童鞋一点思路，不至于搓手不急（当时CocoaPods不能用我心中一万个草泥马崩腾啊）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSPatch的使用]]></title>
    <link href="http://voidxin.github.io/blog/2016/07/16/jspatchde-shi-yong/"/>
    <updated>2016-07-16T00:18:22+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/07/16/jspatchde-shi-yong</id>
    <content type="html"><![CDATA[<p>JSpatch的更多用法可以去github上找文档。不多解释。
先来个简单的demo：</p>

<!--more-->


<p>1：先百度“JSPatch”，进入如下页面：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-e4b6df49a3f1a642.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页@2x.png" /></p>

<p>2：注册账号，添加APP项目：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-6606bbb5b71b47ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建app.png" /></p>

<p>3：获得appkey</p>

<p>4： 下载 SDK 并导入项目</p>

<p>下载 SDK 后解压，将JSPatch.framework
拖入项目中，勾选 &ldquo;Copy items if needed"，并确保 "Add to target&rdquo; 勾选了相应的 target。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-248f00cf2e4e0970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SDK1" /></p>

<p>5：在appdelegate中加入以下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;JSPatch/JSPatch.h&gt;
</span><span class='line'>@implementation AppDelegate
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
</span><span class='line'>    [JSPatch startWithAppKey:@"你的AppKey"];
</span><span class='line'>    [JSPatch sync];
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>6:在viewController中添加一个TableVIew，写入以下代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad {
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>    // Do any additional setup after loading the view, typically from a nib.
</span><span class='line'>    [self addUI];
</span><span class='line'>   // [self dataBegin];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void)addUI{
</span><span class='line'>    [self.view addSubview:self.tableView];
</span><span class='line'>    [self.tableView mas_makeConstraints:^(MASConstraintMaker *make) {
</span><span class='line'>        make.left.equalTo(self.view);
</span><span class='line'>        make.right.equalTo(self.view);
</span><span class='line'>        make.top.equalTo(self.view);
</span><span class='line'>        make.bottom.equalTo(self.view);
</span><span class='line'>    }];
</span><span class='line'>}
</span><span class='line'>#pragma mark -tableView Datasource
</span><span class='line'>- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
</span><span class='line'>    return 1;
</span><span class='line'>}
</span><span class='line'>-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
</span><span class='line'>    return 3;
</span><span class='line'>}
</span><span class='line'>-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
</span><span class='line'>    static NSString *indefier=@"CELL";
</span><span class='line'>    UITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:indefier];
</span><span class='line'>    if (!cell) {
</span><span class='line'>        cell=[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:indefier];
</span><span class='line'>    }
</span><span class='line'>    cell.textLabel.text=[NSString stringWithFormat:@"%ld",indexPath.row];
</span><span class='line'>    
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark tableView delegate
</span><span class='line'>
</span><span class='line'>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark -getter
</span><span class='line'>- (UITableView *)tableView{
</span><span class='line'>    if (!_tableView) {
</span><span class='line'>        _tableView=[[UITableView alloc]initWithFrame:CGRectZero style:UITableViewStylePlain];
</span><span class='line'>        _tableView.delegate=self;
</span><span class='line'>        _tableView.dataSource=self;
</span><span class='line'>    }
</span><span class='line'>    return _tableView;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>运行程序，控制台输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2016-07-16 00:30:06.074 JSPatchHotFixDemo[3309:137704] JSPatch: runScript
</span><span class='line'>2016-07-16 00:30:06.086 JSPatchHotFixDemo[3309:137704] JSPatch: evaluated script, length: 992
</span><span class='line'>2016-07-16 00:30:06.087 JSPatchHotFixDemo[3309:137704] JSPatch: request http://q.jspatch.com/a368c7abdb625542/1.0.0?v=1468600206.087138
</span><span class='line'>2016-07-16 00:30:06.296 JSPatchHotFixDemo[3309:137899] JSPatch: request success {
</span><span class='line'>    v = 2;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>表明集成JSPatch成功。</p>

<p>运行app，我们发现页面是这样的：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-e508240f0c90aa7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20160715-1@2x.png" /></p>

<p>接下来我们希望重写-(UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath方法改变cell的文字，然后增加cell的高度。</p>

<p>7：创建main.js文件，在文件中写入以下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require('VXJspatchTestViewController');
</span><span class='line'> require('UIColor');
</span><span class='line'>defineClass("ViewController", {
</span><span class='line'>            
</span><span class='line'>            tableView_cellForRowAtIndexPath: function(tableView, indexPath) {
</span><span class='line'>            var cell = tableView.dequeueReusableCellWithIdentifier("cell")
</span><span class='line'>            if (!cell) {
</span><span class='line'>            cell = require('UITableViewCell').alloc().initWithStyle_reuseIdentifier(0, "cell")
</span><span class='line'>            }
</span><span class='line'>            cell.textLabel().setText("去吧皮卡丘");
</span><span class='line'>            return cell
</span><span class='line'>            },
</span><span class='line'>            tableView_heightForRowAtIndexPath: function(tableView, indexPath) {
</span><span class='line'>                 return 100;
</span><span class='line'>            },
</span><span class='line'>            //instance method definitions
</span><span class='line'>            tableView_didSelectRowAtIndexPath: function(tableView, indexPath) {
</span><span class='line'>            var testVC = VXJspatchTestViewController.alloc().init();
</span><span class='line'>            testVC.setTitle("我是JSPatch增加的方法");
</span><span class='line'>            self.navigationController().pushViewController_animated(testVC, YES);
</span><span class='line'>           
</span><span class='line'>            }
</span><span class='line'>            }, {});</span></code></pre></td></tr></table></div></figure>


<p>如果你不会写JSPatch代码也没关系，百度“JSPatch Conventor",写入OC源码，自动翻译。</p>

<p>8：创建版本号，上传main.js文件：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-d19f63678b06f210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20160715-2@2x.png" /></p>

<p>9：ok，发布成功，退出app，重新启动运行，恭喜你，实现动态更新，tableViewcell的两个datasource和一个delegate方法已被重写（如果你发现你的代码没起作用，请退出重新启动多次）：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-4c669b741182430e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20160716-0@2x.png" /></p>

<p>点击cell，push到如下页面：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-e9a8d5a9ebf3b6de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20160716-1@2x.png" /></p>

<p>自此，我们实现了一个简单的动态更新，如果以后你的项目想在发版之后修复bug的话，目前使用JSpatch是比较流行的选择。</p>

<p>无Demo不文章，欢迎访问我的github下载本文的Demo：<a href="https://github.com/voidxin/JSPatchHotFixDemo">https://github.com/voidxin/JSPatchHotFixDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C runtime那些事儿]]></title>
    <link href="http://voidxin.github.io/blog/2016/06/15/objective-c-runtimena-xie-shi-er/"/>
    <updated>2016-06-15T23:44:34+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/06/15/objective-c-runtimena-xie-shi-er</id>
    <content type="html"><![CDATA[<p>runtime 号称iOS开发的黑魔法。</p>

<p>现在就让我来探究探究runtime，一来作为学习笔记，二来给有需要的人参考。</p>

<!--more-->


<p>在使用runtime的时候，我们可能会看到一些奇怪的字段，现在就让我来一一讲解一下：</p>

<p>1：SEL</p>

<pre><code> OC在编译时，根据方法的名字生成一个用来区分这个方法的唯一ID，这些SEL组成了一个set集合，当我们在这个集合中查找某个方法时，只需去查找这个方法所对应的SEL即可。所以，SEL的本质就是字符串。
</code></pre>

<p>2：id</p>

<pre><code> id是一个指向objc_object结构体的指针。
</code></pre>

<p>3：isa</p>

<pre><code> objective_c中的object在最后编译的时候会被转成c的结构体，而在这个结构体中有一个isa指针，指向它的类别class。所以，isa是一个指向类别class的结构体指针。
</code></pre>

<p>4：meta class
     当我们发送一个消息给nsobject对象时，这条消息会在对象 的类的方法列表中查找。
   当我们发送一个消息给一个类时，这条消息会在类的meta class的方法列表中寻找。故meta class就是一个类对象的class。</p>

<p>5：IMP:</p>

<pre><code> 本质就是一个函数指针，这个被指向的函数包含一个被接受消息的的对象id，调用方法的SEL以及一些方法的参数，并返回一个id，因此我们可以通过SEL获得它所对应的IMP，在取得了函数指针之后，也就意味着我们找到了需要执行方法的代码入口，这样我们就可以像普通的c语言函数调用一样使用这个行数指针。
</code></pre>

<p>6：Ivar:</p>

<pre><code> 在object中被定义为：typedef struct objc_ivar，它是一个指向objc_ivar结构体的指针，结构体如下定义：
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>              struct_objc_ivar{
</span><span class='line'>                           char *ivar_name 
</span><span class='line'>                           char *ivar_type
</span><span class='line'>                           int ivar_offset
</span><span class='line'>              }</span></code></pre></td></tr></table></div></figure>


<p>主要的理论就是这些，接下来就看看怎么使用者高深莫测的runtime了。假设我们有一个实体类Car，它有如下两个属性。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property(nonatomic,copy)NSString *brand;
</span><span class='line'>@property(nonatomic,copy)NSString *engine;</span></code></pre></td></tr></table></div></figure>


<p>在我们给定这两个参数初始值之后，如果你在程序的运行过程中想修改它的值，那么我们就可以使用runtime来进行变量的控制：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void)changeCar{
</span><span class='line'>    unsigned int number=0;
</span><span class='line'>    __weak typeof(self) weakSelf=self;
</span><span class='line'>    Ivar *ivar=class_copyIvarList([self.car class], &number);
</span><span class='line'>    for (int i=0; i&lt;number; i++) {
</span><span class='line'>        Ivar var=ivar[i];
</span><span class='line'>        const char *varName=ivar_getName(var);
</span><span class='line'>        NSString *propertyName=[NSString stringWithUTF8String:varName];
</span><span class='line'>        int y=arc4random()%7;
</span><span class='line'>        if ([propertyName isEqualToString:@"_brand"]) {
</span><span class='line'>            __strong typeof(weakSelf) strongSelf=weakSelf;
</span><span class='line'>            object_setIvar(self.car, var, strongSelf.brandArray[y]);
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    self.label.text=self.car.brand;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//数组
</span><span class='line'>- (NSArray *)brandArray{
</span><span class='line'>    if (!_brandArray) {
</span><span class='line'>        _brandArray=@[@"Benz",@"Honda",@"BMW",@"Lamborghini",@"Ferrari",@"Porsche",@"audio"];
</span><span class='line'>    }
</span><span class='line'>    return _brandArray;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里是随机动态改变Car的brand，从兰博基尼到东风轰达随机切换。
接下来就是使用runtime来动态添加方法：</p>

<p>  ```
- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.</p>

<pre><code>class_addMethod([self.car class], @selector(printParameter), (IMP)printParameter, "v@:");

[self.button addTarget:self action:@selector(buttonAction) forControlEvents:UIControlEventTouchUpInside];
</code></pre>

<p>}</p>

<p>void printParameter(id self,SEL _cmd){
    NSLog(@&ldquo;5.2v10自然进气发动机610匹马力4轮驱动，0-100加速3.2s&rdquo;);</p>

<p>}</p>

<p>-(void)printParameter{</p>

<p>}</p>

<p>-(void)buttonAction{
    if ([self.car performSelector:@selector(printParameter)]) {
        [self.car performSelector:@selector(printParameter)];
    }
}</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>以上代码表示每点击一次按钮就动态添加printParameter方法来输出当前Car的动力参数。
</span><span class='line'>
</span><span class='line'>接下来就看看怎么使用runtime来拦截和交换方法：
</span><span class='line'>
</span><span class='line'>     再引入plane实体，我们交换plane和car的参数输出函数，让汽车输出飞机的动力参数，代码如下：
</span><span class='line'>     </span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];
  self.textView.text=@&ldquo;ready? go&rdquo;;
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}</p></li>
<li><p>(IBAction)planePress:(id)sender {
  self.textView.text=[self.plane planePowerTakeOff];
}</p></li>
<li><p>(IBAction)exchangePowerPress:(id)sender {
  Method carMethod=class_getInstanceMethod([self.car class], @selector(carPowerTakeOff));
  Method planeMethod=class_getInstanceMethod([self.plane class], @selector(planePowerTakeOff));
  method_exchangeImplementations(carMethod, planeMethod);
  self.textView.text=@&ldquo;power is Exchanged&rdquo;;
}</p></li>
<li>(IBAction)changePowerPress:(id)sender {
  Method carMethod=class_getInstanceMethod([self.car class], @selector(carPowerTakeOff));
  Method lannboMethod=class_getInstanceMethod([self class], @selector(changePower));
  method_exchangeImplementations(carMethod, lannboMethod);
   self.textView.text=@&ldquo;car power is changed&rdquo;;
}</li>
</ul>


<p>-(NSString *)changePower{
    return @&ldquo;我是兰博基尼超跑，我的动力比飞机还强，我到香港只需8分钟&rdquo;;
}</p>

<ul>
<li>(IBAction)carPress:(id)sender {
    self.textView.text=[self.car carPowerTakeOff];
}</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>最后是使用runtime为方法添加新功能。
</span><span class='line'>
</span><span class='line'>这里我们给按钮的点击事件触发的方法添加新的功能。所以增加UIButton的分类，在分类中写入以下代码：
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>(void)load{
  static dispatch_once_t onceManager;
  dispatch_once(&amp;onceManager, ^{
      Class customerClass=[self class];
      SEL oriSEL=@selector(sendAction:to:forEvent:);
      Method oriMethod=class_getInstanceMethod(customerClass, oriSEL);</p>

<pre><code>  SEL customerSEL=@selector(customerAction:to:forEvent:);
  Method customerMethod=class_getInstanceMethod(customerClass, customerSEL);

  BOOL isSuccess=class_addMethod(customerClass, oriSEL, method_getImplementation(customerMethod), method_getTypeEncoding(customerMethod));
  if (isSuccess) {
      class_replaceMethod(customerClass, customerSEL, method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod));
  }else{
      method_exchangeImplementations(oriMethod, customerMethod);
  }
</code></pre>

<p>  });
}
-(void)customerAction:(SEL)action to:target forEvent:(UIEvent *)event{
  NSLog(@&ldquo;我是披着奔驰外观的众泰,众泰汽车，实现您的豪车梦，哈哈哈&rdquo;);
  [self customerAction:action to:target forEvent:event];
}
```</p></li>
</ul>


<p>自此，每次点击button触发的监听方法都将输出众泰汽车的广告。</p>

<p>欧耶，runtime的常用功能就是这些，更高深的用法还在研究之中。最后，本着无demo不文章的精神，给出本篇文章我的github地址：<a href="https://github.com/voidxin/RunTimeDemo">https://github.com/voidxin/RunTimeDemo</a></p>

<p>感谢google上各位老司机的技术分享，本文更多的是对各位老司机分享的总结和实践。谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM模式初体验（使用ReactiveCocoa获取网络数据)]]></title>
    <link href="http://voidxin.github.io/blog/2016/06/15/mvvmmo-shi-chu-ti-yan-(shi-yong-reactivecocoahuo-qu-wang-luo-shu-ju/"/>
    <updated>2016-06-15T16:06:46+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/06/15/mvvmmo-shi-chu-ti-yan-(shi-yong-reactivecocoahuo-qu-wang-luo-shu-ju</id>
    <content type="html"><![CDATA[<p>使用RAC也有一段时间了，由于此前的项目都是使用的MVC模式，网络请求都封装在固定的模块中，抽取出来十分不方便，所以到目前为止并没有涉及到使用RAC去做获取网络请求的情景。</p>

<!--more-->


<p>  近期，着手重构目前手上的项目，准备给臃肿的Controller瘦身，MVVM貌似是一个不错的选择（既然使用了RAC，那为什么不使用MVVM呢?)。于是，开始上手体验MVVM模式和RAC的结合使用（RAC的基础知识在这就不介绍了，百度一下，一大推老司机都有分享）。不用不知道，一用才发现RAC和MVVM简直是绝配啊，那体验真是改变了我对编程的传统观念（函数响应式编程真心好用）。</p>

<p>  这里用一个小demo来举例：</p>

<p>  进入页面加载数据显示。这里使用我当前项目中的一个接口来模拟数据。既然是MVVM，那Model和ViewModel肯定是少不了的。如下：我们新建一个ViewModel叫LoadStoreViewModel(因为这里是加载商店数据),传统的MVC模式中，网络请求都是在ViewController中完成的，这里我们把网络请求封装到对应的ViewModel中去，能够有效的减少ViewController的负担，降低耦合性。</p>

<p>  LoadStoreViewModel主要有三个属性：statues(网络加载状态），code1（编号），以及保存数据的数组dataArry，还有一个加载数据信号loadDataSignal；</p>

<p> 初始化loadDataSignal：(主要进行网络请求）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//
</span><span class='line'>- (RACSignal *)loadDataSignal{
</span><span class='line'>    if (_loadDataSignal==nil) {
</span><span class='line'>        AFHTTPRequestOperationManager *manager=[AFHTTPRequestOperationManager manager];
</span><span class='line'>        manager.requestSerializer=[[AFJSONRequestSerializer alloc]init];
</span><span class='line'>        NSDictionary *params=@{@"code1":@"MWG08A09"};
</span><span class='line'>        _loadDataSignal=[manager rac_GET:kLoadURL parameters:params];
</span><span class='line'>    }
</span><span class='line'>    return _loadDataSignal;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>调用loadDataSignal处理网络请求结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>-(void)initWithSubscrible{
</span><span class='line'>    [[self.loadDataSignal deliverOn:[RACScheduler mainThreadScheduler]] subscribeNext:^(RACTuple *jsonDataResult) {
</span><span class='line'>        //请求成功，加载数据
</span><span class='line'>        NSDictionary *tuple=[jsonDataResult objectAtIndex:0];
</span><span class='line'>        NSArray *resultList=tuple[@"resultList"];
</span><span class='line'>        if (resultList.count&gt;0) {
</span><span class='line'>            self.dataArray=[[[resultList.rac_sequence
</span><span class='line'>                              map:^id(NSDictionary *dataSource) {
</span><span class='line'>                              NSDictionary *dic=[(NSDictionary *)dataSource mutableCopy];
</span><span class='line'>                                  WGStoreModel *model=[WGStoreModel mj_objectWithKeyValues:dic];
</span><span class='line'>                                  return model;
</span><span class='line'>                            }] array] mutableCopy];
</span><span class='line'>        }
</span><span class='line'>    }];
</span><span class='line'>    
</span><span class='line'>    //请求失败
</span><span class='line'>    [self.loadDataSignal subscribeError:^(NSError *error) {
</span><span class='line'>       self.statues=@"没有网络，哈哈";
</span><span class='line'>    }];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ViewModel的操作完成，接下来要在Controller中绑定ViewModel
绑定ViewModel，初始化，然后监听ViewModel中的网络请求状态，获得ViewMode中网络请求结果，在Controller中给出相应的提示，数据加载成功，显示数据刷新控件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void)bindViewModel{
</span><span class='line'>    @weakify(self);
</span><span class='line'>    self.storeViewModel=[[LoadStoreViewModel alloc]init];
</span><span class='line'>    self.isLoading=YES;
</span><span class='line'>    self.code1=kCode1;
</span><span class='line'>    RAC(self.storeViewModel,code1)=RACObserve(self, code1);
</span><span class='line'>    
</span><span class='line'>    //加载状态
</span><span class='line'>   [RACObserve(self, isLoading) subscribeNext:^(id x) {
</span><span class='line'>        UIApplication.sharedApplication.networkActivityIndicatorVisible = [x boolValue];
</span><span class='line'>   }];
</span><span class='line'>    
</span><span class='line'>    //加载网络数据成功
</span><span class='line'>    [[[RACObserve(self.storeViewModel, dataArray) ignore:nil] doNext:^(id x) {
</span><span class='line'>        self.isLoading=YES;
</span><span class='line'>    }] subscribeNext:^(id x) {
</span><span class='line'>        @strongify(self);
</span><span class='line'>        self.isLoading=NO;
</span><span class='line'>        //刷新控件--
</span><span class='line'>        [self.tableView reloadData];
</span><span class='line'>    }];
</span><span class='line'>    
</span><span class='line'>    //加载网络数据失败
</span><span class='line'>    [[RACObserve(self.storeViewModel, statues) filter:^BOOL(id value) {
</span><span class='line'>        //filter是过滤
</span><span class='line'>        return value !=nil;
</span><span class='line'>    }] subscribeNext:^(NSString *str) {
</span><span class='line'>        UIAlertView *alertView=[[UIAlertView alloc]initWithTitle:@"提示" message:str delegate:self cancelButtonTitle:@"confirm" otherButtonTitles:nil, nil];
</span><span class='line'>        [alertView show];
</span><span class='line'>    }];
</span><span class='line'>    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ViewController中初始化TableView；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UITableView *)tableView{
</span><span class='line'>    if (!_tableView) {
</span><span class='line'>        _tableView=[[UITableView alloc]initWithFrame:CGRectZero style:UITableViewStylePlain];
</span><span class='line'>        _tableView.delegate=self;
</span><span class='line'>        _tableView.dataSource=self;
</span><span class='line'>        _tableView.showsVerticalScrollIndicator=NO;
</span><span class='line'>        _tableView.rowHeight=49;
</span><span class='line'>    }
</span><span class='line'>    return _tableView;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>tableView的数据源和协议方法实现</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#pragma mark -tableView DataSource
</span><span class='line'>- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
</span><span class='line'>    return 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
</span><span class='line'>    return [self.storeViewModel.dataArray count];
</span><span class='line'>}
</span><span class='line'>-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
</span><span class='line'>    static NSString *indefier=@"CELL";
</span><span class='line'>    UITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:indefier];
</span><span class='line'>    if (!cell) {
</span><span class='line'>        cell=[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:indefier];;
</span><span class='line'>    }
</span><span class='line'>    WGStoreModel *model=self.storeViewModel.dataArray[indexPath.row];
</span><span class='line'>    cell.textLabel.text=model.shopName;
</span><span class='line'>    
</span><span class='line'>    return cell;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>无demo不文章，为了更好的理解本篇文章，请到我的github下载对应的demo，一运行探究竟(<a href="https://github.com/voidxin/ReactiveCocoaRequestData">https://github.com/voidxin/ReactiveCocoaRequestData</a>)</p>

<p>谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS10上手体验]]></title>
    <link href="http://voidxin.github.io/blog/2016/06/14/ios10shang-shou-ti-yan/"/>
    <updated>2016-06-14T22:49:49+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/06/14/ios10shang-shou-ti-yan</id>
    <content type="html"><![CDATA[<p>今天凌晨，苹果2016年开发者技术大会召开。</p>

<!--more-->


<p>  熬夜看直播下来，发现并没有什么让人惊喜的东西发布，似乎Macbook air也没有要更新的意思。一句话来概括就是：“本次发布会是软件盛会",更新了4大系统.把OS X改成了叫macOS.</p>

<p>  为了体验最新的iOS10，一上班就开始忙了，首先用开发者账号登陆开发者中心，去下载固件，期待下载完成之后用iTunes安装，无奈，我的5s还是9.3.1的系统，iTunes提示我要先升级到9.3.2，一看安装包还不小，估计得下载好长一段时间。无奈只能换一种方式，那就是通过描述文件来安装.</p>

<p>于是在百度搜了个下载地址（<a href="http://www.99danji.com/news/89498/">http://www.99danji.com/news/89498/</a>  ）用Safari·打开下载即可。下载完成之后重启，重启之后果然出现iOS10安装版本的提示。接下来就是等待下载安装的过程。一路很顺畅（一开始担心5s变白板，看来是多余的担心了 ）。事实证明，5s安装之后比起9.3.1来说会感觉更卡顿。然后就是对于APP软件来说，就目前使用的情况，手机QQ出现的问题较多：</p>

<p> 1:按HOME键退出时，角标被无限放大一闪而过，</p>

<p> 2:消息通知的时候通知总是重复提示（已查看过的消息退出后又马上弹出推送通知）。</p>

<p> 3:qq空间点击文字详情之后崩溃闪退
微信APP没有出现像手机QQ那样的问题，但是微信在分享链接到朋友圈时会出现闪退的现象。然后，就像开发者大会上说的那样，一些系统软件的确也支持卸载，这里上图：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/1376067-c4727c61e6dbf497.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IMG_4793.PNG" /></p>

<p>  目前短时间体验下来就这点感受，更多的变化还需细细体验，不过在这里要奉劝5s的用户，如果不想体验没点击一次都零点八秒左右的延迟反应现象的话还是先不要安装iOS10了，等待正式版发布的时候，期待苹果能有优化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用UIActivityViewController实现AirDrop分享]]></title>
    <link href="http://voidxin.github.io/blog/2016/05/08/shi-yong-uiactivityviewcontrollershi-xian-airdropfen-xiang/"/>
    <updated>2016-05-08T14:41:51+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/05/08/shi-yong-uiactivityviewcontrollershi-xian-airdropfen-xiang</id>
    <content type="html"><![CDATA[<p>今天闲来无事，无意中看了一篇利用AirDrop实现文件传输的文章，于是动手写了一个很简单的demo。其实就是使用UIActivityViewController。
具体实现如下：</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "DemoViewController.h"
</span><span class='line'>@interface DemoViewController ()
</span><span class='line'>@property(nonatomic,strong)UIWebView *webView;
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation DemoViewController
</span><span class='line'>
</span><span class='line'>- (void)viewDidLoad {
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>    // Do any additional setup after loading the view, typically from a nib.
</span><span class='line'>    self.view.backgroundColor=[UIColor whiteColor];
</span><span class='line'>    
</span><span class='line'>    [self addUI];
</span><span class='line'>    [self loadDataFile];
</span><span class='line'>   
</span><span class='line'>}
</span><span class='line'>-(void)loadDataFile{
</span><span class='line'>    NSURL *fileURL=[self returnURLWithFileName:@"demo.png"];
</span><span class='line'>    [self.webView loadRequest:[NSURLRequest requestWithURL:fileURL]];
</span><span class='line'>}
</span><span class='line'>-(void)addUI{
</span><span class='line'>    //add webView
</span><span class='line'>    [self.view addSubview:self.webView];
</span><span class='line'>    //add rightBarItem
</span><span class='line'>     self.navigationItem.rightBarButtonItem=[[UIBarButtonItem alloc]initWithTitle:@"分享" style:UIBarButtonItemStyleDone target:self action:@selector(sharedAction)];
</span><span class='line'>}
</span><span class='line'>- (UIWebView *)webView{
</span><span class='line'>    if (!_webView) {
</span><span class='line'>        _webView=[[UIWebView alloc]init];
</span><span class='line'>        _webView.frame=self.view.bounds;
</span><span class='line'>    }
</span><span class='line'>    return _webView;
</span><span class='line'>}
</span><span class='line'>#pragma mark -return URL for fileName
</span><span class='line'>-(NSURL *)returnURLWithFileName:(NSString *)fileName{
</span><span class='line'>    NSArray *arrs=[fileName componentsSeparatedByString:@"."];
</span><span class='line'>    NSString *pathStr=[[NSBundle mainBundle] pathForResource:arrs.firstObject ofType:arrs[1]];
</span><span class='line'>    NSURL *fileURL=[NSURL fileURLWithPath:pathStr];
</span><span class='line'>    return fileURL;
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark rightBarItem Action
</span><span class='line'>-(void)sharedAction{
</span><span class='line'>    NSLog(@"rightBarItem is clicked");
</span><span class='line'>    NSURL *fileURL=[self returnURLWithFileName:@"demo.png"];
</span><span class='line'>    NSArray *urls=@[fileURL];
</span><span class='line'>    UIActivityViewController *activituVC=[[UIActivityViewController alloc]initWithActivityItems:urls applicationActivities:nil];
</span><span class='line'>    NSArray *cludeActivitys=@[UIActivityTypePostToFacebook,
</span><span class='line'>                               UIActivityTypePostToTwitter,
</span><span class='line'>                               UIActivityTypePostToWeibo,
</span><span class='line'>                               UIActivityTypePostToVimeo,
</span><span class='line'>                               UIActivityTypeMessage,
</span><span class='line'>                               UIActivityTypeMail,
</span><span class='line'>                               UIActivityTypeCopyToPasteboard,
</span><span class='line'>                               UIActivityTypePrint,
</span><span class='line'>                               UIActivityTypeAssignToContact,
</span><span class='line'>                               UIActivityTypeSaveToCameraRoll,
</span><span class='line'>                               UIActivityTypeAddToReadingList,
</span><span class='line'>                               UIActivityTypePostToFlickr,
</span><span class='line'>                               UIActivityTypePostToTencentWeibo];
</span><span class='line'>    activituVC.excludedActivityTypes=cludeActivitys;
</span><span class='line'>
</span><span class='line'>    [self presentViewController:activituVC animated:YES completion:nil];
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)didReceiveMemoryWarning {
</span><span class='line'>    [super didReceiveMemoryWarning];
</span><span class='line'>    // Dispose of any resources that can be recreated.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>详细的demo可以访问我的github去下载，希望可以一起交流一起进步：
demo下载地址：<a href="https://github.com/voidxin/AirDropDemoWithZX">https://github.com/voidxin/AirDropDemoWithZX</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS监听H5页面goBack返回事件问题]]></title>
    <link href="http://voidxin.github.io/blog/2016/03/20/iosjian-ting-h5ye-mian-gobackfan-hui-shi-jian-wen-ti/"/>
    <updated>2016-03-20T20:39:57+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/03/20/iosjian-ting-h5ye-mian-gobackfan-hui-shi-jian-wen-ti</id>
    <content type="html"><![CDATA[<p>从native直接push到一个webView页面，隐藏navigationBar，使用H5的头部为导航栏。此时会出现一个问题，就是push出的这个webview没有了原生的navigationBar，那么在点击H5页面上的返回按钮时怎么pop到之前的页面呢？</p>

<!--more-->


<p>  当然，我们可以使用上一遍博客提到的利用webViewjavascriptBridge的第三方来解决，这就需要H5和nativ相配合，如果h5是另一个团队做的，那么解决这么一个简单的问题确实显得有点小题大做。</p>

<p>  所以可以使用一种更简单的方法，利用webView 的delegate方法来控制pop到H5页面还是Native页面。</p>

<p>  由于系统尚且要兼容iOS7，加上还涉及到native向webView写cookie的问题，而WKWebView貌似只支持在iOS8以上使用，在cookie处理和缓存处理方面会有比较大的坑，所以项目中依旧使用的是UIWebView。在webView的代理方法中添加如下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType{
</span><span class='line'>    if (navigationType==UIWebViewNavigationTypeBackForward) {
</span><span class='line'>        self.webView.canGoBack?[self.webView goBack]:[self.navigationController popViewControllerAnimated:YES];
</span><span class='line'>    }
</span><span class='line'>    return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>  这样就可以区分返回native还是H5</p>

<p>补充：
      以上适用整个页面都是H5的页面
      如果只有navigationBar是原生的，此时应该重写pop事件：如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void)navigationBarItemBackImage{
</span><span class='line'>    UIImage *image=[UIImage imageNamed:@"navigationBack"];
</span><span class='line'>    if ([PSBTools systemVersion]&gt;=7) {
</span><span class='line'>        image= [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
</span><span class='line'>    }
</span><span class='line'>    self.navigationItem.leftBarButtonItem=[[UIBarButtonItem alloc]initWithImage:image style:UIBarButtonItemStyleDone target:self action:@selector(goBackAction)];
</span><span class='line'>}
</span><span class='line'>-(void)goBackAction{
</span><span class='line'>    if (self.webView.canGoBack==YES) {
</span><span class='line'>        [self.webView goBack];
</span><span class='line'>    }else{
</span><span class='line'>        [self.navigationController popViewControllerAnimated:YES];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS利用MQTT实现消息订阅和推送]]></title>
    <link href="http://voidxin.github.io/blog/2016/03/13/iosli-yong-mqttshi-xian-xiao-xi-ding-yue-he-tui-song/"/>
    <updated>2016-03-13T23:28:03+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/03/13/iosli-yong-mqttshi-xian-xiao-xi-ding-yue-he-tui-song</id>
    <content type="html"><![CDATA[<p>  消息推送其实就是在客户端维护一个长连接，而MQTT是一种轻量级低消耗的长连接方式，相比于普通的socket链接来说，它对服务器的消耗没有那么大。其原理大致如下：</p>

<!--more-->


<p>  服务器，服务器给客户端一个心跳应答，这样就形成客户端服务器的一次完整的握手，这个握手是让双方都知道他们之间的连接是没有断开，客户端是在线的。如果超过一个时间的阈值，客户端没有收到服务器的应答，或者服务器没有收到客户端的心跳，那么对客户端来说则断开与服务器的连接重新建立一。</p>

<p>  在iOS端实现MQTT推送如下：</p>

<pre><code>推送：

  首先判断服务器是否启动成功：



推送内容：
</code></pre>

<p>  订阅主题：</p>

<p>最后释放连接:</p>

<p>demo地址：<a href="https://github.com/voidxin/MQTTPush">https://github.com/voidxin/MQTTPush</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS上传图片文件到七牛遇到的那些坑]]></title>
    <link href="http://voidxin.github.io/blog/2016/03/12/iosshang-chuan-tu-pian-wen-jian-dao-qi-niu-yu-dao-de-na-xie-keng/"/>
    <updated>2016-03-12T23:35:37+08:00</updated>
    <id>http://voidxin.github.io/blog/2016/03/12/iosshang-chuan-tu-pian-wen-jian-dao-qi-niu-yu-dao-de-na-xie-keng</id>
    <content type="html"><![CDATA[<p>最近公司的项目涉及到图片的保存，基于大量图片放在本地服务器会给公司增加不小的压力，所以选择了云存储，对比之后选择了七牛。</p>

<!--more-->


<p>  七牛的官方文档实在是太过于简单，下载SDK之后，根据官方 给的Demo，成功上传了图片。只是token的生成过程有些波折。</p>

<p>由于七牛官方不提倡在客户端生成Token，所以没有给出相应的iOS端生成Token的代码。多方查找资料之后自己写了一个本地生成Token的方法如下：</p>

<p>有了token之后就引入SDK，如下操作即可实现上传：</p>

<p>一开始很纳闷，从放回信息中没有找到我们上传成功之后需要的图片的外链接地址，查阅官方文档之后才明白外链接地址需要我们自己拼接。首先，成功之后返回的resp是：</p>

<p>resp {</p>

<pre><code>          hash = "FhweZwfJipE4P0K6Mm_QbC6P0dxW";

          key = zx12;
</code></pre>

<p>}</p>

<p>如果失败resp为nil，所以图片的外链接地址就是你的 域名/key(返回的key)</p>

<p>此demo下载地址：<a href="https://github.com/voidxin/UploadImageToQiniu">https://github.com/voidxin/UploadImageToQiniu</a></p>
]]></content>
  </entry>
  
</feed>
